import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";
import { SystemLog } from "@/types";

export const generateSystemLogsPDF = async (
  logs: SystemLog[],
  filters: any
) => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();

  try {
    // Load logo
    const logoResponse = await fetch("/kotsek-logo.png");
    const logoBlob = await logoResponse.blob();
    const logoBase64 = await new Promise((resolve) => {
      const reader = new FileReader();
      reader.onloadend = () => resolve(reader.result);
      reader.readAsDataURL(logoBlob);
    });

    // Add logo
    doc.addImage(logoBase64 as string, "PNG", 15, 10, 30, 30);
  } catch (error) {
    console.warn("Could not load logo, continuing without it");
  }

  // Add header without logo for now
  doc.setFontSize(20);
  doc.text("System Logs Report", pageWidth / 2, 20, { align: "center" });

  // Add filters info
  doc.setFontSize(10);
  doc.text("Generated by KoTsek", pageWidth / 2, 30, { align: "center" });
  doc.text(`Date: ${new Date().toLocaleDateString()}`, pageWidth / 2, 35, {
    align: "center",
  });

  // Add filters summary
  let yPos = 45;
  doc.setFontSize(12);
  doc.text("Filters Applied:", 15, yPos);
  yPos += 7;

  if (filters.type) {
    doc.text(`Type: ${filters.type}`, 20, yPos);
    yPos += 7;
  }
  if (filters.action) {
    doc.text(`Action: ${filters.action}`, 20, yPos);
    yPos += 7;
  }
  if (filters.dateRange?.from) {
    doc.text(
      `Date Range: ${filters.dateRange.from.toLocaleDateString()} - ${
        filters.dateRange.to?.toLocaleDateString() || "Present"
      }`,
      20,
      yPos
    );
    yPos += 7;
  }

  // Add table
  const tableColumn = ["Time", "Type", "Action"];
  const tableRows = logs.map((log) => [
    new Date(log.timestamp).toLocaleTimeString(),
    log.log_type,
    log.action,
  ]);

  autoTable(doc, {
    head: [tableColumn],
    body: tableRows,
    startY: yPos + 5,
    theme: "grid",
    styles: {
      fontSize: 8,
      cellPadding: 2,
    },
    headStyles: {
      fillColor: [41, 128, 185],
      textColor: 255,
      fontSize: 10,
      fontStyle: "bold",
    },
  });

  // Add footer
  const pageCount = (doc as any).internal.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.text(
      `Page ${i} of ${pageCount}`,
      pageWidth / 2,
      doc.internal.pageSize.getHeight() - 10,
      { align: "center" }
    );
  }

  return doc;
};
