"""fix lot_id type and relationships

Revision ID: 1e927fcd94bc
Revises: faae1912389d
Create Date: 2025-04-21 13:23:40.435916

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '1e927fcd94bc'
down_revision: Union[str, None] = 'faae1912389d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('parking_slots',
    sa.Column('slot_id', sa.UUID(), nullable=False),
    sa.Column('slot_number', sa.Integer(), nullable=False),
    sa.Column('section', sa.String(length=50), nullable=False),
    sa.Column('vehicle_type', sa.String(length=20), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('current_vehicle_id', sa.UUID(), nullable=True),
    sa.Column('reserved_for', sa.UUID(), nullable=True),
    sa.Column('lot_id', sa.String(length=50), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['current_vehicle_id'], ['vehicle_entries.entry_id'], ),
    sa.ForeignKeyConstraint(['reserved_for'], ['parking_customers.customer_id'], ),
    sa.PrimaryKeyConstraint('slot_id')
    )
    op.add_column('parking_lots', sa.Column('name', sa.String(length=100), nullable=False))
    op.add_column('parking_lots', sa.Column('total_capacity', sa.Integer(), nullable=False))
    op.add_column('parking_lots', sa.Column('vehicle_type', sa.String(length=20), nullable=False))
    op.alter_column('parking_lots', 'lot_id',
               existing_type=sa.UUID(),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.drop_constraint('parking_lots_plate_number_fkey', 'parking_lots', type_='foreignkey')
    op.drop_column('parking_lots', 'is_reserved')
    op.drop_column('parking_lots', 'plate_number')
    op.drop_column('parking_lots', 'is_occupied')
    op.drop_column('parking_lots', 'lot_number')
    op.drop_constraint('vehicle_entries_lot_id_fkey', 'vehicle_entries', type_='foreignkey')
    op.drop_column('vehicle_entries', 'lot_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('vehicle_entries', sa.Column('lot_id', sa.UUID(), autoincrement=False, nullable=True))
    op.create_foreign_key('vehicle_entries_lot_id_fkey', 'vehicle_entries', 'parking_lots', ['lot_id'], ['lot_id'])
    op.add_column('parking_lots', sa.Column('lot_number', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
    op.add_column('parking_lots', sa.Column('is_occupied', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('parking_lots', sa.Column('plate_number', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.add_column('parking_lots', sa.Column('is_reserved', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.create_foreign_key('parking_lots_plate_number_fkey', 'parking_lots', 'parking_customers', ['plate_number'], ['plate_number'])
    op.alter_column('parking_lots', 'lot_id',
               existing_type=sa.String(length=50),
               type_=sa.UUID(),
               existing_nullable=False)
    op.drop_column('parking_lots', 'vehicle_type')
    op.drop_column('parking_lots', 'total_capacity')
    op.drop_column('parking_lots', 'name')
    op.drop_table('parking_slots')
    # ### end Alembic commands ###
