# Redis Setup Guide for Windows

## 1. Install Redis on Windows

Redis doesn't have official support for Windows, but you can use Redis on Windows in several ways:

### Option A: Windows Subsystem for Linux (WSL) - Recommended

1. Install WSL by opening PowerShell as Administrator and running:
   ```
   wsl --install
   ```

2. After installation and restart, install Ubuntu from Microsoft Store

3. Open Ubuntu terminal and install Redis:
   ```
   sudo apt update
   sudo apt install redis-server
   ```

4. Start Redis server:
   ```
   sudo service redis-server start
   ```

5. Verify installation:
   ```
   redis-cli ping
   ```
   Should return "PONG"

### Option B: Use Memurai (Redis alternative for Windows)

1. Download Memurai from: https://www.memurai.com/
2. Run the installer and follow the instructions
3. Memurai will run as a Windows service automatically
4. Verify installation by opening a command prompt and running:
   ```
   memurai-cli ping
   ```
   Should return "PONG"

### Option C: Docker Container (Recommended for Development)

1. Install Docker Desktop for Windows
   - Download from: https://www.docker.com/products/docker-desktop/
   - Follow installation instructions

2. The project already has Redis configured in the docker-compose.yaml file:
   ```yaml
   redis:
     container_name: redis
     image: redis:latest
     ports:
       - "6379:6379"
     volumes:
       - redis_data:/data
     networks:
       - app-network
     restart: always
     command: redis-server --appendonly yes
   ```

3. Start all services including Redis:
   ```
   docker-compose up -d
   ```

4. Verify Redis container is running:
   ```
   docker ps
   ```
   You should see a running Redis container

5. Test Redis connection:
   ```
   docker exec -it redis redis-cli ping
   ```
   Should return "PONG"

6. The Flask API is already configured to connect to the Redis service with these environment variables in docker-compose.yaml:
   ```yaml
   environment:
     - REDIS_HOST=redis
     - REDIS_PORT=6379
   ```

## 2. Configure Redis with your Flask app

1. Ensure your .env file contains the following Redis configuration (for local development outside Docker):
   ```
   REDIS_HOST=localhost
   REDIS_PORT=6379
   ```

2. Install the Redis Python package (if not already installed):
   ```
   pip install redis
   ```

3. Check your Flask app connection to Redis:
   - From your code in auth.py, Redis tries to connect with these parameters:
     ```python
     redis_client = redis.Redis(
         host=os.getenv('REDIS_HOST', 'localhost'),
         port=int(os.getenv('REDIS_PORT', 6379)),
         db=0,
         decode_responses=True,
         socket_timeout=5,
         socket_connect_timeout=5,
         retry_on_timeout=True
     )
     ```

## 3. Testing Redis Connection

1. Start your Flask app
2. Test the Redis connection using the `/test-email` endpoint in your API
3. Check for "Successfully connected to Redis" message in your console

## 4. Troubleshooting

If you encounter connection issues:

1. Ensure Redis/Memurai service is running
   - For WSL: `sudo service redis-server status`
   - For Memurai: Check Windows Services (services.msc)
   - For Docker: `docker ps` to check if container is running

2. Test Redis connectivity directly:
   - WSL: `redis-cli ping`
   - Memurai: `memurai-cli ping`
   - Docker: `docker exec -it redis redis-cli ping`

3. Check firewall settings if connecting from different systems

4. Verify environment variables are loaded correctly in your Flask app

5. For Docker setup, ensure ports are correctly mapped and not in use by other services

6. Check Docker logs if Redis container isn't starting properly:
   ```
   docker logs redis
   ```

## 5. Run Flask with Docker Compose (Project Structure)

The project is already set up with Docker Compose with these main components:

1. Flask API with Redis integration:
   - Flask app connects to Redis using the hostname "redis" (Docker service name)
   - Environment variables are configured in docker-compose.yaml
   - Redis host is set to the service name "redis" in Docker network

2. Start the complete project:
   ```
   docker-compose up -d
   ```

3. Check all running services:
   ```
   docker-compose ps
   ```

4. View logs of Redis service:
   ```
   docker-compose logs redis
   ```

5. View logs of Flask API:
   ```
   docker-compose logs flask_api
   ```

## 6. Redis Commands for Testing (Optional)

You can interact with Redis directly to test its functionality:

```
# Connect to Redis
redis-cli  # or memurai-cli for Memurai
# For Docker: docker exec -it redis redis-cli

# Set a key
SET testkey "Hello Redis"

# Get a key
GET testkey

# Delete a key
DEL testkey

# Check key expiration
TTL testkey

# List all keys
KEYS *
```

Note: Your auth.py uses Redis for OTP storage with 10-minute expiration (600 seconds).

eto api keys

SENDGRID_API_KEY=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
SENDER_EMAIL=dev.kotsek@gmail.com

